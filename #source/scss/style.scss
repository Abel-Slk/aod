//<МИКСИНЫ>===============================================================================================
@import "mixins.scss";
//</МИКСИНЫ>===============================================================================================

//<ШРИФТЫ>===============================================================================================

//<Подключаем шрифты>=======================================================================================
@import url('https://fonts.googleapis.com/css2?family=Lato:ital,wght@0,300;0,400;0,700;1,400&display=swap');
//</Подключаем шрифты>=======================================================================================

//<Иконочные шрифты>==========================================================================================

//</Иконочные шрифты>==========================================================================================

//<Шрифт по умолчанию>==========================================================================================
$fontfamily: "Lato";
//</Шрифт по умолчанию>==========================================================================================

//</ШРИФТЫ>=======================================================================================================

//<ПЕРЕМЕННЫЕ>===========================================================================================================
$minwidth: 320px;

//</ПЕРЕМЕННЫЕ>===========================================================================================================

//<ОБНУЛЕНИЕ, ОБЩИЕ ПАРАМЕТРЫ>===============================================================================================
@import "null.scss";
body {
	color: #000;
	font-size: 14px;
	&.lock {
		overflow: hidden;
	}
}
//</ОБНУЛЕНИЕ, ОБЩИЕ ПАРАМЕТРЫ>===============================================================================================

//<ОБОЛОЧКА>===========================================================================================================
.wrapper {
	width: 100%;
	min-height: 100%;
	overflow: hidden; //  на всякий случай допишем - чтобы у нас ничего за наш экран не вылезло (?)
	&.loaded {
	}
}
//</ОБОЛОЧКА>===========================================================================================================

//<ОСНОВНАЯ СЕТКА>===========================================================================================================
.container { // в данном макете он будет не у всех блоков а только у некоторых
	max-width: 1130px; // в макете 1100 - но поскольку я не буду строить брейк-пойнты, то я сразу хочу задать отступ и слева справа чтобы у меня контейнер при сужении экрана не ударялся в края поэтому я увеличиваю на 30 пикселей свой контейнер и сразу эти же 30 пикселей убираю paddingом. в результате макс ширина КОНТЕНТА будет 1100 как и в макете! просто еще с паддингом по бокам
	padding: 0 15px;
	margin: 0 auto;
}
//</ОСНОВНАЯ СЕТКА>===========================================================================================================

//<ПОДКЛЮЧЕНИЕ ФАЙЛОВ UI СТИЛЕЙ, ФОРМ И ГОТОВЫХ КЛАССОВ>====================================================================================================
@import "ui.scss";
//</ПОДКЛЮЧЕНИЕ ФАЙЛОВ UI СТИЛЕЙ, ФОРМ И ГОТОВЫХ КЛАССОВ>====================================================================================================

//<ПОДКЛЮЧЕНИЕ ФАЙЛОВ СТИЛЕЙ СТРАНИЦ И ЭЛЕМЕНТОВ>====================================================================================================
@import "header.scss";
@import "footer.scss";
//</ПОДКЛЮЧЕНИЕ ФАЙЛОВ СТИЛЕЙ СТРАНИЦ И ЭЛЕМЕНТОВ>====================================================================================================

//<ОСНОВНОЙ БЛОК>====================================================================================================
.page {
	// абсолютно позиционирую и раскидываю на весь экран (didn't explain though why we need this for .page - but for some reason the main-screen image is not shown without this! -- и похоже что когда нам нужно что-то сделать на весь экран - без ограничивающего контейнера - он делает это абсолютным позиционированием): 
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;

	@include flexbox(); // a mixin which just does display: flex плюс просто некоторые префиксы для того чтобы поддерживать больше browserов + также в этот миксин заложил font-size: 0 для того чтобы скрыть фантомные отступы которые могут появляться
	flex-direction: column; // чтобы выстроить в одну колонку main-screen и content
}
.main-screen {
	flex: 1 0 100%; // can grow, can't shrink, take all height (height cause we used flex-direction: column)
	// задали место под картинку - и теперь делаем адаптивность:
	position: relative;
	&__bg { // highlighted red - but compiles ok to .css!
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;

		// hmm... so we used ibg in HTML to convert the img into background -- so why are we applying here position: absolute; top: 0; left: 0?? Разве это работает с фоном?? По идее нам надо только задать размеры чтобы фон стал виден - и это делается с пом width: 100% & height: 100% - но больше ничего не должно быть нужно! Попробовал убрать absolute; top: 0; left: 0 - все работает! Так что мб и реально это здесь не нужно!
		// ACTUALLY DOESN'T MATTER - SKIP THIS FOR NOW! His code in ui.scss just might be a bit different! And there might be updates to ibg() in further vids - so just skip for now!!
		// По сути ПОКА достаточно понять просто следующее - мы делаем адаптивность изображений как обычно - просто вместо object-fit: cover используем ibg! И в данном случае еще делаем фуллскрин через flex: 1 0 100% - и все! Детали ibg не важны сейчас!

		// стили фона background здесь прописывать уже не нужно - они уже написаны для класса ibg в ui.scss!
	}
}

.content {

}

.generation {
	padding: 120px 0; // отступы до контента. Они разные в разных блоках (типа newgeneration) поэтому задаем для каждого блока отдельно - а не в общем классе .block. В авокоде 117 сверху и 142 снизу - но там line хаит большой внизу значит надо меньше - пусть по 120 сверху и снизу
	background-color: #f7f7f7; // not .newgeneration__block cause the background shouldn't be limited by the container
	
	// насчет настраивания отзывчивости - "работаем от контента": смотрим отзывчивость в devTools - говорит остается только подобрать здесь отступы работаем от контента смотрим тут еще нормально вот здесь вот уже не очень- так пусть будет медиазапрос пусть 900
	@media (max-width: 900px){ 
		padding: 80px 0;
	}
	@media (max-width: 600px){
		padding: 30px 0;
	}
}
.generation__block {}
.block {
	text-align: center;
}
.block__icon {
	margin: 0px 0px 30px 0px; // сначала поставили 33 но потом немного уменьшили когда добавили лайн-хайт для тайтла
}
.block__title {
	color: #353738;
	font-size: 18px;
	font-weight: 700;
	text-transform: uppercase;
	letter-spacing: 3.6px;
	margin: 0px 0px 18px 0px; // отступ вниз в авокоде 35 но здесь у текста line-height очень большой поэтому поэтому навскидку 20 (потом уменьшили до 18 когда добавили лайн-хайт)
	line-height: 24px; // зачем-то добавил потом - хоть в авокоде и не было (вроде сказал что на адаптиве все стало симпатичней выглядеть? Эт типа на телефонных экранах когда этот длинный заголовок начинает идти в две строки?)
}
.block__text {
	color: #848789;
	font-size: 18px;
	line-height: 34px;

	&_j {
		text-align: justify;
		font-size: 16px;
		line-height: 30px;
		&:after { // the gray line below the text
			content: '';
			display: block; // иначе не будет видно (а почему интересно? С точками в хедере этого не надо было делать!)
			margin: 35px auto 0 auto; // 40 в аве минус лайнхайт - пусть 35
			width: 50px;
			height: 1px;
			background-color: #d7d7d7; //  вижу что что-то палочка у нас тут не того цвета (авокод дал неточно) - такое бывает - возьмем пипетку и заменим
		}
	}
}
@media (max-width: 1500px){
	.block__text{
		&_j{
			&:after {
				margin: 15px auto 0 auto;
			}
		}
	}
}

//====================================================================================================

.brands {
	&_rev {
		.brands__column { // can't use &__column here cause we're inside &_rev! &__column here would compile to brands_rev__column which doesn't exist!
			@include flexorder(1);
			&_b{ // .brands__column_b (& always compiles to the value of the DIRECT parent!)
				@include flexorder(2); // теперь при адаптиве на малых экранах получ тут две картинки подряд - не очень - но с другой стороны если я поменяю то здесь будет все равно две картинки потому что тогда в первой brands__row картинки будет  подряд склеиваться - поэтому оставляю как есть
			}
		}
	}

	&__row {
		@include flexbox();
	}
	&__column {
		flex: 0 1 33.333%;
		&_b {
			flex: 0 1 66.667%;
		}
	}

	&__item {}

	&__content {
		padding: 70px 65px 55px 65px;
		
		position: relative;
		&:after { // делаем стрелочку. у меня есть заготовочка - см видос по геом фигурам
			content: '';
			position: absolute;
			bottom: -10px;
			left: 50%;
			margin: 0px 0px 0px -10px;
			width: 0;
			height: 0;
			border-left: 10px solid transparent;
			border-right: 10px solid transparent;
			border-top: 10px solid #fff;
		}
		z-index: 2; // без этого стрелочка оказалась накрыта brands__image
	}
	&__image {
		padding: 0px 0px 37.51% 0px; // поставим здесь сначала ex 58 процентов padding снизу вот у нас что-то появилось и просто нам нужно выставить в DevTools. вверху ширину экрана как в макете  (там 1600 пикс общая ширина) - далее нашли в Elements слева наш <div class="brands__image ibg"> - и видим что у него высота сейсас 309 пикс. теперь нам нужно подогнать проценты в Styles справа: выделяем 58% и стрелкой вниз уменьшаем до 200  икселей - как у нас макете высота brands__image. При 38% имеем 202 пикс. можно изгаляться там 37.5% вот 199.98  пикс
		// вот он самый настоящий настоящая отзывчивость теперь наши блоки отзывчивы как по высоте так и по ширине мы видим при сужении экрана у нас пропорционально сужается вот этот вот блок так поскольку сужается этот блок а сужается весь колонка. в общем это все зависит вот друг от друга в частности от контента самого потому что и заплатят вам многое за вашу верстку или нет зависит от того ломается или при добавлении или или удаление контента я добавляю здесь сколько удобно годный текста и благодаря ай пи джи благодаря отзывчивости все весь мой остальной контент адекватно смотрится максимально адекватно насколько это возможно картинка пытается вписаться да здесь все происходит здесь происходит хорошо если я текст вообще удалю у меня ничего собственно не сломается прям катастрофически да то же самое будет на огромных экранах я увеличил там 3 500 пожалуйста 4 500 да она выглядит не очень но она выглядит она не сломалась

		// здесь к img не применяем адаптив как обычно--это же у нас получается автоматически делается классом ibg для всех браузеров кроме IE - see ui.scss!
	}


	@media (max-width: 1500px){ // опять работаем от контента то есть мы смотрим сужаем экран и смотрим чего нас i can и вот где то вот здесь вот уже на 1500 пикселей оба под уменьшил вот эти отступы огроменные
		&__content{
			padding: 40px 35px 30px 35px; 
		}
	}
	@media (max-width: 1100px){ // тянем где-то вот под тысячу вот тысячу сто пикселей по 1100 пикселей потому что дальше уже текст будет не очень читабелен и мы будем переходить в другую плоскость нашего нашего flex контейнера 
		&__row{
			flex-direction: column; //  у нас вообще пропал item блок первой колонки потому что уже перестали на него действовать высоты второй колонки и нам сейчас нужно будет собственно эти высоты задать ему (see the @media in .item{})
		}

		&_last { // чтобы в адаптиве первая картинка последней строки брендов не упиралась в посл картинку второй строки:
			.brands__column{ // again - can't use &__column here - it would compile to brands_last__column! So sometimes can't use &!
				&:nth-child(1){
					@include flexorder(2);
				}
				&:nth-child(2){
					@include flexorder(1);
				}
				&:nth-child(3){
					@include flexorder(3);
				}
			}
		}
	}
}


.item {
	display: block; // initially it's an a - and we want it to take full width of the column
	height: 100%; // изначально сама колонка у нас на всю высоту (по высоте второй колонки) а item у нас на высоту логотипа &__logo. это дело изменим просто увеличив высоту айтема на сто процентов чтобы он у нас занял всю колонку. и здесь очень важный ключевой момент на самом деле потому что потому что у нас теперь вот этот вот вторая колонка собственно задает высоту первой вот так вот получается у нас все будет взаимосвязано и это нереально круто
	// reminder: колонки brands__column явл-ся флекс-эл-тами флекс-контейнера brands__row и поэтому автоматически растягиваются вертикально на всю ширину контейнера из-за align-items: stretch. Но сами brands__column не явлся флекс-контейнерами - поэтому их содержимое никуда не растягивается! И тут мы можем либо колонки сделать флекс-контейнерами -- либо как здесь - просто заставить содержимое колонки занять всю ее высоту!

	position: relative;
	&__image {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
	}
	&__logo {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;

		z-index: 2; // чтобы был над item__image

		@include flexbox();
		flex-direction: column; // это нужно когда у нас в лого будет по два элемента - это будет в блоке shop где помимо лого еще будет спан shopnow который должен идти под лого (а где просто одно лого там эта строка роли играть не будет)
		justify-content: center;
		align-items: center;

		@include anim(0.3s, 0s); // transition - сейчас почему-то работает только если заходим на картинку по высоте на уровне картинки из правой колонки!

		background-color: rgba(100, 194, 158, 0.5); // взяли background-color: #64c29e с макета, на http://hex2rgba.devoth.com/ сконвертировали #64c29e в rgba получили rgba(100, 194, 158, 1) - и transparency попробовали исправить ех на 0.5
		
		// мы будем показывать logo и background-color только при наведении - поэтому изначально:
		opacity: 0; // logo и background-color исчезают (лого и на background исчезнет но я все еще могу кликать по ссылке она просто стала прозрачной но она никуда не делась и я могу собственно с этим блоком взаимодействовать)
		visibility: hidden; // нельзя ВЗАИМОДЕЙСТВОВАТЬ с лого и background -- эмм так-то да - но вообще-то по-прежнему можно кликнуть на item и сработает ссылка! И эт навер потому-то НЕ ЛОГО явл-ся ссылкой а item!! item-то мы никуда не скрывали! Вот он и продолжает быть работающей ссылкой! )
		// вообще по сути выключать и включать visibility нам тут вообще не надо! Потому что это управляет возможностью взаимодействовать - а у нас взаимодействие тут как с обычной ссылкой - те активна при наведении - так что ничего менять со взаимодействием и не надо!! А надо только чтобы лого и фон не показывались пока не наведем - просто не показывались! И для этого достаточно изначально выключить opacity и включить при ховере! И все! Попробовал убрать вообще visibility - все работает нормально!

		span{ // здесь можем пристроить наш span которые мы добавили для айтемов в шопе
			margin: 10px 0px 0px 0px;
			font-size: 14px;
			font-weight: 700;
			color: #ffffff;
			text-transform: uppercase;
			letter-spacing: 2.8px;
		}
	}

	&:hover{
		.item__logo{
			opacity: 1;
			visibility: visible;
		}
	}

	@media (max-width: 1100px){ // на 1100 из-за flex-direction: column у &__row у нас вообще пропал item блок первой колонки (потому что уже перестали на него действовать высоты второй колонки) и нам сейчас нужно будет собственно эти высоты задать ему
		height: auto; // what is this for exactly? Didnt' explain and it Doesn't seem to change anything!
		padding: 0px 0px 70% 0px; // то есть мы проделываемто же самое что мы проделывали с картинкой во второй колонке
	}
}

//===========================================================================================================================================================================================================

.slider {
	background-color: #f7f7f7;
	padding: 120px 0 60px 0;
}
.slider__body {}
.slider__item {
	text-align: center;
}
.slider__icon {
	margin: 0px 0px 35px 0px;
}
.slider__title {
	margin: 0px 0px 20px 0px;
	color: #353738;
	font-size: 18px;
	font-weight: 700;
	letter-spacing: 1.8px;
	span{
		color: #848789;
		font-weight: 300;
	}
}
.slider__text {
	color: #848789;
	font-size: 24px;
	font-style: italic;
	line-height: 34px;
}

//===========================================================================================================================================================================================================

.shop {
	@media (max-width: 1100px){ // все классно получается адаптивно - но здесь нужно смотреть опять же от контента то есть она сужается аж вплоть до не знаю каких размеров но она естественно нечитабельно поэтому в какой-то момент нам нужно посмотреть достаточно ли читабельно все удобно ли рассмотреть эту картинку на этом разрешении и так далее почему ты так сложилось что у нас примерно на 1100 у нас какой-то breakpoint как раз в этом на этом размере и хочется уже что-то поменять
		.shop__body{
			flex-wrap: wrap;
		}
		.shop__column {
			flex: 0 1 50%; // мы хотим чтобы при адаптиве каждая широкая колонка шла на всю ширину экрана а две центральные узкие шли вместе и тоже на всю ширину. Для этого изначально сделаем все колонки 50% - но первую и последнюю потом сделаем 100%
			&:first-child{
				flex: 1 1 100%;
			}
			&:last-child{
				flex: 1 1 100%;
			}
		}


		.shop__footer { // &__footer doesn't work for some reason here!!
			padding: 50px 0; // подуменьшим здесь padding просто чтобы поменьше было
		}
		.shop__btn { // не помещается немножко на мобилках - поэтому подуменьшим здесь padding
			padding: 0 30px; // теперь будет норм при уменьшении вплоть до 280 пикс в ширину - что меньше любой мобилки так что безопасно
		}
	}
}
.shop__body {
	@include flexbox();
}
.shop__column {
	&_b {
		flex: 0 1 33.333%;
	}
	flex: 0 1 16.666%; // 33.33 / 2
}
.shop__block {}
.block-shop {
	height: 100%; // растягиваем на всю высоту колонок (а высота колонок у нас определяется высотой самой высокой колонки - которая в свою очередь будет определяться высотой самой высокой хуйни block-shop__item_b)
}
.block-shop__row {
	@include flexbox();
}
.block-shop__column {
	flex: 0 1 50%;
}
.block-shop__item {
	&_b {
		padding: 0px 0px 200.5% 0px; // попробую эту высокую картинку сделать размерозадающим элементом. Она 534 пикселя в высоту (на макете который у нас шириной в 1600 пикс) - и к 534 привязываемся и проделаем такой же фокус как и когда делали маленькую картинку в brands - поставим 1600 ширину в DevTools и постараемся добиться вот этой высоты 534 пикс. Изначально поставили 100% - смотрим высоту - она 266. Увеличиваем - получаем 533 пикс при ровно 200%. то есть фактически вот это вот картинкой мы добились соответствия макету
		// Note: задав так размер, мы тем самым мы установили высоту колонок shop__column (которая до этого не была никак задана). Этим мы воспользуемся дальше
	}
	// Теперь постараемся привязать к размеру нашей высокой размерозадающей картинки block-shop__item_b размеры всех остальных картинок block-shop__item (которые внутри двухэтажных блоков block-shop):

	height: auto; // не объяснил зачем но делал одновременно с паддингом
	padding: 0px 0px 50% 0px; // 50% от высоты родителя - те высоты колонки shop__column (которую мы установили выше) - чтобы нижняя block-shop__item картинка заняла 50% высоты колонки. (Почему проценты другие и не соотносятся с 200.5%: дело в том что с пом 200.5% мы задали высоту колонок (которая до этого не была никак задана) - и теперь, когда высота колонок задана, мы делаем высоту айтема ровно 50% от существующей высоты колонок!)
	// Note: Изначально мы думали что это и маленьким верхним block-shop__item картинкам задаст 50% высоты колонки - но не получается - потому что ширины маленьких картинок заданы в block-shop__column как 50% (через flex: 0 1 50%) - те их ширины меньше в два раза чем у большой картинки внизу - поэтому у нас не идет соответствие (так толком и не объяснил почему - но короче это как-то мешает паддингом 50% задать половинную высоту сразу и верху и низу - можем только низу)
	&_l { // little
		padding: 0px 0px 100% 0px; // отдельно дорабатываем размеры верхних маленьких block-shop__item: эти маленькие айтемы модифицируем как block-shop__item_l и для них увеличиваем паддинг до 100%
		// Possible explanation why 100% here (not verified - just my guesses): Здесь нужно 100% от высоты родителя - видимо потому что у маленьких айтемов уже другой родитель - это block-shop__column (который внутри block-shop__row)! Либо же мб берется высота block-shop__row поскольку высота block-shop__column не задана -- хотя и block-shop__row не задана - но мб автоматически принимается что для нее размер 100% должен быть таким чтобы заполнить всю свободную высоту в колонке - а там мы уже заняли 50% нижней картинкой block-shop__item. Это бы объяснило почему 100% - потому что 50% высоты колонки уже занято нижней картинкой и нам надо занять оставшиеся 50% - и мы это делаем раздвигая block-shop__row на 100% возможной для нее высоты! (again - this is not verified - but could explain stuff)
	}
	// и что мы получаем ребят мы получаем то что нам нужно мало того что это соответствии с макетом до полной это еще и наша отзывчивость посмотрите как ведет себя блок при сужении экран вы только посмотрите на это это чудеса да и только. и собственно у меня получилось сделать этот блок все-таки отзывчивым вот отзывчивым без указания каких-то физических размеров точнее фиксированных размеров до все относительно и все работает как надо и при этом очень точно

}
.item__logo {}
.item__image {}

.shop__footer {
	background-color: #282f35;
	padding: 75px 0;
	text-align: center; // works on inline elements! So will work on a!
}
.shop__btn {
	display: inline-block;
	height: 50px;
	line-height: 48px; // потому что у нас border!

	padding: 0 60px;

	border: 1px solid rgba(255, 255, 255, 0.5);
	color: #fff;
	font-size: 14px;
	font-weight: 700;
	text-transform: uppercase;
	letter-spacing: 2.8px;
}

//===========================================================================

.subscribe {
	@media (max-width: 750px){ // работаем от контента
		.subscribe__body {
			padding: 50px 0;
		}
	}
	@media (max-width: 500px){ // и где-то на 500 можно уже формочку сложить
		.subscribe__form {
			// flex-direction: column;
			display: block; // на мобилках большой отступ вниз от кнопки - и див с кнопкой занимает высоту 126 - это потому что у нас был задан базовый размер 126px для subscribe__button - он превратился в высоту когда мы здесь вот это дело перевернули с пом flex-direction: column. мы можем вообще вместо flex-direction: column поставить дисплей блок чтобы не лохматить бабушку
		}
		.subscribe__input {
			padding: 0px 0px 8px 0px; // перенесем вниз паддинг который был справа
		}
	}
}
.subscribe__body { // зачем я еще ставил класс container спросите вы -  ну в контейнере у меня просто заданы уже паддинги там все настроено поэтому я просто его использовал дополнительно еще к вот этому ограничению боди
	max-width: 534px;
	margin: 0 auto;
	padding: 110px 0; // а контейнер добавит еще свои боковые паддинги по 15 пикс

	text-align: center; // again just that is enough instead of flex stuff! Потому что все эл-ты внутри инлайновые!
}
.subscribe__logo {
	margin: 0px 0px 39px 0px;


	// ничего из этого не стал делать - навер потому что подразумевается что лого всегда малекнькое?
	// width: 94px;
	// img{
	// 	max-width: 100%;
	// }
}
.subscribe__label {
	color: #848789;
	font-size: 24px;
	font-style: italic;
	// line-height: 34px; // he didn't use that!
	margin: 0px 0px 35px 0px;
}
.subscribe__form {
	@include flexbox();
}
.subscribe__input {
	flex: 1 1 auto; // позволим ему увеличиваться он будет большим
	padding: 0px 8px 0px 0px;
}
.input {
	width: 100%; // чтобы занять всю доступную ширину а не только необходимую для контента
	height: 69px;

	border: 1px solid #d3d7d9;
	background-color: #ffffff;
	padding: 0px 28px;
	font-size: 20px;
	font-style: italic;
	color: #929292;
	&.focus { // у меня скриптик forms.js вешает некоторые классы например при фокусе он вешает класс фокус отличие от обычного классов и псевдоклассов фокус в том что этот класс остается даже когда мы убираем фокус с объекта но если он заполнен сейчас вот инфу то есть класс фокус вот здесь в консоли видно вот поэтому я его сделал
		color: #333; // для фокуса я хочу поменять цвет вот такой серенький но когда мы набираем он более такой более контрастный
		font-style: normal; // и уберем италик
	}
	&.err{ // также у меня в forms.js есть проверка на email и если ошибка - будет добавляться класс err и при классе err мы будем менять цвет границы. для того чтобы проверочка работала мне нужно навесить в HTML классы req и email чтобы мой скриптик проверял здесь почту
		border: 1px solid red;
	}
}
.subscribe__button {
	flex: 0 0 126px; 
}
.subscribe__btn {
	width: 100%; // чтобы занять всю доступную ширину а не только необходимую для контента
	height: 69px;
	line-height: 69px;

	background-color: #64c29e;
	color: #ffffff;
	font-size: 24px;
	font-weight: 300;
	text-transform: uppercase;
	// for some reason no need to center the text on the button horizontally - with padding or anything else - cause already centered! With a we had to center it but here we don't! And it doesn't look like any of his custom styies do it - so it might be done for buttons by default!
}



//</ОСНОВНОЙ БЛОК>====================================================================================================
