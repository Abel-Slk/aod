//<МИКСИНЫ>===============================================================================================
@import "mixins.scss";
//</МИКСИНЫ>===============================================================================================

//<ШРИФТЫ>===============================================================================================

//<Подключаем шрифты>=======================================================================================
@import url('https://fonts.googleapis.com/css2?family=Lato:ital,wght@0,300;0,400;0,700;1,400&display=swap');
//</Подключаем шрифты>=======================================================================================

//<Иконочные шрифты>==========================================================================================

//</Иконочные шрифты>==========================================================================================

//<Шрифт по умолчанию>==========================================================================================
$fontfamily: "Lato";
//</Шрифт по умолчанию>==========================================================================================

//</ШРИФТЫ>=======================================================================================================

//<ПЕРЕМЕННЫЕ>===========================================================================================================
$minwidth: 320px;

//</ПЕРЕМЕННЫЕ>===========================================================================================================

//<ОБНУЛЕНИЕ, ОБЩИЕ ПАРАМЕТРЫ>===============================================================================================
@import "null.scss";
body {
	color: #000;
	font-size: 14px;
	&.lock {
		overflow: hidden;
	}
}
//</ОБНУЛЕНИЕ, ОБЩИЕ ПАРАМЕТРЫ>===============================================================================================

//<ОБОЛОЧКА>===========================================================================================================
.wrapper {
	width: 100%;
	min-height: 100%;
	overflow: hidden; //  на всякий случай допишем - чтобы у нас ничего за наш экран не вылезло (?)
	&.loaded {
	}
}
//</ОБОЛОЧКА>===========================================================================================================

//<ОСНОВНАЯ СЕТКА>===========================================================================================================
.container { // в данном макете он будет не у всех блоков а только у некоторых
	max-width: 1130px; // в макете 1100 - но поскольку я не буду строить брейк-пойнты, то я сразу хочу задать отступ и слева справа чтобы у меня контейнер при сужении экрана не ударялся в края поэтому я увеличиваю на 30 пикселей свой контейнер и сразу эти же 30 пикселей убираю paddingом. в результате макс ширина КОНТЕНТА будет 1100 как и в макете! просто еще с паддингом по бокам
	margin: 0 auto;
	padding: 0 15px;
}
//</ОСНОВНАЯ СЕТКА>===========================================================================================================

//<ПОДКЛЮЧЕНИЕ ФАЙЛОВ UI СТИЛЕЙ, ФОРМ И ГОТОВЫХ КЛАССОВ>====================================================================================================
@import "ui.scss";
//</ПОДКЛЮЧЕНИЕ ФАЙЛОВ UI СТИЛЕЙ, ФОРМ И ГОТОВЫХ КЛАССОВ>====================================================================================================

//<ПОДКЛЮЧЕНИЕ ФАЙЛОВ СТИЛЕЙ СТРАНИЦ И ЭЛЕМЕНТОВ>====================================================================================================
@import "header.scss";
@import "footer.scss";
//</ПОДКЛЮЧЕНИЕ ФАЙЛОВ СТИЛЕЙ СТРАНИЦ И ЭЛЕМЕНТОВ>====================================================================================================

//<ОСНОВНОЙ БЛОК>====================================================================================================
.page {
	// абсолютно позиционирую и раскидываю на весь экран (didn't explain though why we need this for .page - but for some reason the main-screen image is not shown without this! -- и похоже что когда нам нужно что-то сделать на весь экран - без ограничивающего контейнера - он делает это абсолютным позиционированием): 
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;

	@include flexbox(); // a mixin which just does display: flex плюс просто некоторые префиксы для того чтобы поддерживать больше browserов + также в этот миксин заложил font-size: 0 для того чтобы скрыть фантомные отступы которые могут появляться
	flex-direction: column; // чтобы выстроить в одну колонку main-screen и content
}
.main-screen {
	flex: 1 0 100%; // can grow, can't shrink, take all space (he said all height? Mb it's height and not width cause we used flex-direction: column?..)
	position: relative;
	&__bg { // highlighted red - but compiles ok to .css!
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;

		// hmm... so we used ibg in HTML to convert the img into background -- so why are we applying here position: absolute; top: 0; left: 0?? Разве это работает с фоном?? По идее нам надо только задать размеры чтобы фон стал виден - и это делается с пом width: 100% & height: 100% - но больше ничего не должно быть нужно! Попробовал убрать absolute; top: 0; left: 0 - все работает! Так что мб и реально это здесь не нужно!
		// ACTUALLY DOESN'T MATTER - SKIP THIS FOR NOW! His code in ui.scss just might be a bit different! And there might be updates to ibg() in further vids - so just skip for now!!
		// По сути ПОКА достаточно понять просто следующее - мы делаем адаптивность изображений как обычно - просто вместо object-fit: cover используем ibg! И в данном случае еще делаем фуллскрин через flex: 1 0 100% - и все! Детали ibg не важны сейчас!

		// стили фона background здесь прописывать уже не нужно - они уже написаны для класса ibg в ui.scss!
	}
}

.content {

}

.newgeneration {
	padding: 120px 0; // отступы до контента. Они разные в разных блоках (типа newgeneration) поэтому задаем для каждого блока отдельно - а не в общем классе .block. В авокоде 117 сверху и 142 снизу - но там line хаит большой внизу значит надо меньше - пусть по 120 сверху и снизу
	background-color: #f7f7f7; // not .newgeneration__block cause the background shouldn't be limited by the container
	
	// насчет настраивания отзывчивости - "работаем от контента": смотрим отзывчивость в devTools - говорит остается только подобрать здесь отступы работаем от контента смотрим тут еще нормально вот здесь вот уже не очень- так пусть будет медиазапрос пусть 900
	@media (max-width: 900px){ 
		padding: 80px 0;
	}
	@media (max-width: 600px){
		padding: 30px 0;
	}
}
.container {}
.newgeneration__block {}
.block {
	text-align: center;
}
.block__icon {
	margin: 0px 0px 30px 0px; // сначала поставили 33 но потом немного уменьшили когда добавили лайн-хайт для тайтла
}
.block__title {
	color: #353738;
	font-size: 18px;
	font-weight: 700;
	text-transform: uppercase;
	letter-spacing: 3.6px;
	margin: 0px 0px 18px 0px; // отступ вниз в авокоде 35 но здесь у текста line-height очень большой поэтому поэтому навскидку 20 (потом уменьшили до 18 когда добавили лайн-хайт)
	line-height: 24px; // зачем-то добавил потом - хоть в авокоде и не было (вроде сказал что на адаптиве все стало симпатичней выглядеть? Эт типа на телефонных экранах когда этот длинный заголовок начинает идти в две строки?)
}
.block__text {
	color: #848789;
	font-size: 18px;
	line-height: 34px;

	&_j {
		text-align: justify;
		font-size: 16px;
		line-height: 30px;
		&:after { // line below the text
			content: '';
			display: block; // иначе не будет видно (а почему интересно? С точками в хедере этого не надо было делать!)
			margin: 35px auto 0 auto; // 40 в аве минус лайнхайт - пусть 35
			width: 50px;
			height: 1px;
			background-color: #d7d7d7; //  вижу что что-то палочка у нас тут не того цвета (авокод дал неточно) - такое бывает - возьмем пипетку и заменим
		}
	}
}


//====================================================================================================

.brands {}
.brands__row {
	@include flexbox();
}
.brands__column {
	flex: 0 1 33.333%;
	&_b {
		flex: 0 1 66.667%;
	}
}

.brands__item {}

.brands__content {
	padding: 70px 65px 55px 65px;

	// делаем стрелочку. у меня есть заготовочка стрелка -  здесь я останавливаться не буду потом посмотрите видос по геометрическим фигурам
	position: relative;
	&:after {
		content: '';
		position: absolute;
		bottom: -10px;
		left: 50%;
		margin: 0px 0px 0px -10px;
		width: 0;
		height: 0;
		border-left: 10px solid transparent;
		border-right: 10px solid transparent;
		border-top: 10px solid #fff;
	}
	z-index: 2; // без этого стрелочка оказалась накрыта brands__image
}
.brands__image {
	padding: 0px 0px 37.51% 0px; // поставим здесь сначала ex 58 процентов padding снизу вот у нас что-то появилось и просто нам нужно выставить в DevTools. вверху ширину экрана как в макете  (там 1600 пикс общая ширина) - далее нашли в Elements слева наш <div class="brands__image ibg"> - и видим что у него высота сейсас 309 пикс. теперь нам нужно подогнать проценты в Styles справа: выделяем 58% и стрелкой вниз уменьшаем до 200  икселей - как у нас макете высота brands__image. При 38% имеем 202 пикс. можно изгаляться там 37.5% вот 199.98  пикс
	// вот он самый настоящий настоящая отзывчивость теперь наши блоки отзывчивы как по высоте так и по ширине мы видим при сужении экрана у нас пропорционально сужается вот этот вот блок так поскольку сужается этот блок а сужается весь колонка. в общем это все зависит вот друг от друга в частности от контента самого потому что и заплатят вам многое за вашу верстку или нет зависит от того ломается или при добавлении или или удаление контента я добавляю здесь сколько удобно годный текста и благодаря ай пи джи благодаря отзывчивости все весь мой остальной контент адекватно смотрится максимально адекватно насколько это возможно картинка пытается вписаться да здесь все происходит здесь происходит хорошо если я текст вообще удалю у меня ничего собственно не сломается прям катастрофически да то же самое будет на огромных экранах я увеличил там 3 500 пожалуйста 4 500 да она выглядит не очень но она выглядит она не сломалась 
}

.item {
	height: 100%; // изначально сама колонка у нас на всю высоту (по высоте второй колонки) а item у нас на высоту логотипа &__logo. это дело изменим просто увеличив высоту айтема на сто процентов чтобы он у нас занял всю колонку. и здесь очень важный ключевой момент на самом деле потому что потому что у нас теперь вот этот вот вторая колонка собственно задает высоту первой вот так вот получается у нас все будет взаимосвязано и это нереально круто
	// reminder: колонки brands__column явл-ся флекс-эл-тами флекс-контейнера brands__row и поэтому автоматически растягиваются вертикально на всю ширину контейнера из-за align-items: stretch. Но сами brands__column не явлся флекс-контейнерами - поэтому их содержимое никуда не растягивается! И тут мы можем либо колонки сделать флекс-контейнерами -- либо как здесь - просто заставить содержимое колонки занять всю ее высоту!
	
	display: block; // initially it's inline cause it's an a - and we want it to take full width of the column

	position: relative;
	&__image {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
	}
	.item__logo {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;

		z-index: 2; // чтобы был над item__image

		@include flexbox();
		justify-content: center;
		align-items: center;

		@include anim(0.3s, 0s); // transition - сейчас почему-то работает только если заходим на картинку по высоте на уровне картинки из правой колонки!

		background-color: rgba(100, 194, 158, 0.5); // взяли background-color: #64c29e с макета, на http://hex2rgba.devoth.com/ сконвертировали #64c29e в rgba получили rgba(100, 194, 158, 1) - и transparency попробовали исправить ех на 0.5
		
		// мы будем показывать logo и background-color только при наведении - поэтому изначально:
		opacity: 0; // logo и background-color исчезают (но все еще можно кликнуть в любом месте и на лого и на background)
		visibility: hidden; // нельзя взаимодействовать ни с лого ни с  background (но почему-то по-прежнему можно кликнуть на фон который по высоте на уровне картинки из правой колонки!)
	}

	&:hover{
		.item__logo{
			opacity: 1;
			visibility: visible;
		}
	}
}

//</ОСНОВНОЙ БЛОК>====================================================================================================
